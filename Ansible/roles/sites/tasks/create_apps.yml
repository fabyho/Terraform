# Import our local app vars
- name: Include app vars
  include_vars:
    file: '{{ app_include }}'
    
# Set up the app directory
- name: Create {{ app_name }} directory
  win_file:
    path: '{{ app_dest }}'
    state: directory
    
# Add the app to IIS, assuming it's a top level app
- name: Create IIS web app {{ app_name }}
  win_iis_webapplication:
    name: '{{ app_name }}'
    application_pool: '{{ app_pool }}'
    physical_path: '{{ app_dest }}'
    site: '{{ site_name }}'
    state: present
  when: top_level

# Send shell script handler to convert the directory into a web application
# if not a top level app. Workaround because the IIS Ansible modules do not currently
# handle the creation of application inside virtual directories
# Assumes Web Administration modules are loaded for powershell
- name: Convert directory into web application. Requires helper script
  win_shell: C:\convert_to_app.ps1 {{ site_name }} {{ virtual_path }} "{{ app_pool }}"
  when: not top_level 

# Git init is safe to re-run
# Note: chdir args exist only for this task. will return to default dir after execution is done.
# Copy remote repos to the app directories
- name: Initialize the local app repo
  win_command: git init
  args:
    chdir: '{{ app_dest }}'
- name: Check to see if the remote repo is already tracked
  win_stat:
    path: '{{ app_dest }}\.git\config'
  register: tmp
- name: Checkout repo if not already tracked
  win_command: git remote add -t {{ app_branch }} origin {{ app_repo }}
  args:
    chdir: '{{ app_dest }}'
  when: tmp.stat.checksum == git_checksum
- name: Pull to grab latest updates from the remote repo
  win_command: git pull
  args:
    chdir: '{{ app_dest }}'
- name: Force checkout to ensure all local files match the remote repo
  win_command: git checkout -f HEAD
  args: 
    chdir: '{{ app_dest }}'
